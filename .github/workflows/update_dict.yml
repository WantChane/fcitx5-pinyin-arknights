name: update and release
on:
  schedule:
    - cron: '0 8 * * *'
  workflow_dispatch:
    inputs:
      force:
        description: 'Force update even if version unchanged'
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  pull-requests: write

env:
  PYTHON_VERSION: "3.10"

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      changed: ${{ steps.check-version.outputs.changed }}
      current_version: ${{ steps.check-version.outputs.current_version }}
      commit_sha: ${{ steps.get-sha.outputs.sha }}
      should_build: ${{ steps.set-should-build.outputs.should_build }}

    steps:
    - name: checkout@v4
      uses: actions/checkout@v4

    - name: setup-python@v5
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: install requirements
      run: pip install -r requirements.txt

    - name: check version
      id: check-version
      run: python script/check_version.py

    - name: set should_build flag
      id: set-should-build
      run: |
        if [ "${{ steps.check-version.outputs.changed }}" == 'true' ] || [ "${{ inputs.force }}" == 'true' ]; then
          echo "should_build=true" >> $GITHUB_OUTPUT
        else
          echo "should_build=false" >> $GITHUB_OUTPUT
        fi

    - name: commit version update
      id: commit-version
      if: ${{ steps.check-version.outputs.changed == 'true' }}
      uses: EndBug/add-and-commit@v9
      with:
        author_name: 'GitHub Actions'
        author_email: 'actions@github.com'
        message: 'chore(version): Auto-update VERSION file'
        add: 'VERSION'
        
    - name: push changes
      if: ${{ steps.check-version.outputs.changed == 'true' }}
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ github.ref }}

    - name: get current HEAD SHA
      id: get-sha
      run: echo "sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

  build-and-package:
    needs: check-version
    runs-on: ubuntu-latest
    if: needs.check-version.outputs.should_build == 'true'
    steps:
      - name: checkout@v4
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: install system dependencies
        run: sudo apt install -y libime-bin p7zip

      - name: setup-python@v5
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: install requirements
        run: pip install -r requirements.txt

      - name: run script/build.sh
        run: |
          chmod +x script/build.sh
          ./script/build.sh

      - name: Package files into 7z and tar.gz
        run: |
          mkdir -p artifact
          cd output

          find . -name "an_*.dict.yaml" -print0 | xargs -0 7z a ../artifact/rime_dicts.7z
          find . -name "an_*.dict" -print0 | xargs -0 7z a ../artifact/fcitx5_dicts.7z
          find . -name "an_*_titles.txt" -print0 | xargs -0 7z a ../artifact/titles.7z
          
          find . -name "an_*.dict.yaml" -print0 | tar -czvf ../artifact/rime_dicts.tar.gz --null -T -
          find . -name "an_*.dict" -print0 | tar -czvf ../artifact/fcitx5_dicts.tar.gz --null -T -
          find . -name "an_*_titles.txt" -print0 | tar -czvf ../artifact/titles.tar.gz --null -T -

      - name: Generate checksum
        uses: jmgilman/actions-generate-checksum@v1
        with:
          patterns: |
            artifact/*.7z
            artifact/*.tar.gz
          output: artifact/checksum.txt

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-assets
          path: artifact/
          retention-days: 7 

  publish-release:
    needs: 
      - build-and-package
      - check-version
    if: needs.check-version.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: download artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-assets
          path: artifact/

      - name: get date str
        id: date
        run: echo "date=$(date +'%y.%m.%d')" >> $GITHUB_OUTPUT

      - name: create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.date.outputs.date }}
          name: Release ${{ steps.date.outputs.date }}
          target_commitish: ${{ needs.check-version.outputs.commit_sha }}
          body: |
            词库版本: ${{ needs.check-version.outputs.current_version }}
          files: artifact/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}