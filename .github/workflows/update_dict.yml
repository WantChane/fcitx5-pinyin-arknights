name: update and release
on:
  schedule:
    - cron: '0 8 * * *'
  workflow_dispatch:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write

env:
  PYTHON_VERSION: "3.10"

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      current_version: ${{ steps.check-version.outputs.current_version }}
      incremental_dicts: ${{ steps.parse-commit.outputs.incremental_dicts }}
      build_type: ${{ steps.determine-type.outputs.type }}

    steps:
    - name: checkout@v4
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: setup-python@v5
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: install requirements
      run: pip install -r requirements.txt

    - name: parse commit message
      id: parse-commit
      if: ${{ github.event_name == 'push' }}
      run: |
        COMMIT_MSG=$(git log -1 --pretty=%B)
        FIRST_LINE=$(echo "$COMMIT_MSG" | head -n 1)
        SCOPE=$(echo "$FIRST_LINE" | awk -F'[()]' '{print $2}')

        DICTS=""
        for dic in $(echo "$SCOPE" | tr ',' ' '); do
          if [[ $dic == an_* ]]; then
            DICTS="${DICTS}${dic},"
          fi
        done

        DICTS=${DICTS%,}
        echo "incremental_dicts=${DICTS}" >> $GITHUB_OUTPUT
        echo "Detected incremental dictionaries: ${DICTS}"

    - name: check version
      id: check-version
      run: python script/check_version.py

    - name: commit version update
      id: commit-version
      if: ${{ steps.check-version.outputs.changed == 'true' }}
      uses: EndBug/add-and-commit@v9
      with:
        author_name: 'GitHub Actions'
        author_email: 'actions@github.com'
        message: 'chore(version): Auto-update VERSION file [skip ci]'
        add: 'VERSION'

    - name: push changes
      if: ${{ steps.check-version.outputs.changed == 'true' }}
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ github.ref }}

    - name: determine build type
      id: determine-type
      run: |
        type="none"

        if [ "${{ steps.check-version.outputs.changed }}" == 'true' ]; then
          type="full"
        elif [ -n "${{ steps.parse-commit.outputs.incremental_dicts }}" ]; then
          type="incremental"
        fi

        echo "type=$type" >> $GITHUB_OUTPUT
        echo "Build type determined: $type"

  build:
    needs: check-version
    runs-on: ubuntu-latest
    if: needs.check-version.outputs.build_type != 'none'
    steps:
      - name: checkout@v4
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: install system dependencies
        run: sudo apt install -y libime-bin

      - name: setup-python@v5
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: install requirements
        run: pip install -r requirements.txt

      - name: run full build
        if: ${{ needs.check-version.outputs.build_type == 'full' }}
        run: |
          chmod +x script/build.sh
          ./script/build.sh -a

      - name: download base artifacts
        uses: dawidd6/action-download-artifact@v11
        if: ${{ needs.check-version.outputs.build_type == 'incremental' }}
        with:
          name: base-dicts
          path: output
          workflow: ${{ github.workflow }}.yml
          branch: main
          workflow_conclusion: success 

      - name: install requirements
        run: pip install -r requirements.txt

      - name: run incremental build
        if: ${{ needs.check-version.outputs.build_type == 'incremental' }}
        run: |
          chmod +x script/build.sh
          ./script/build.sh -d ${{ needs.check-version.outputs.incremental_dicts }}

      - name: upload-artifact@v4
        uses: actions/upload-artifact@v4
        with:
          name: base-dicts
          include-hidden-files: true
          path: |
            output
            !output/.gitkeep
          retention-days: 30
          overwrite: true

  package:
    needs: 
      - check-version
      - build
    runs-on: ubuntu-latest
    outputs: 
      build-date: ${{steps.date.outputs.date}}
      artifact-name: release-assets-${{steps.date.outputs.date}}

    steps:
      - name: download artifacts
        uses: actions/download-artifact@v4
        with:
          name: base-dicts
          path: artifact

      - name: install system dependencies
        run: sudo apt install -y p7zip

      - name: get date str
        id: date
        run: echo "date=$(date +'%y.%m.%d')" >> $GITHUB_OUTPUT

      - name: package files into 7z and tar.gz
        run: |
          cd artifact
          find . -name "an_*.dict.yaml" -print0 | xargs -0 7z a rime_dicts.7z
          find . -name "an_*.dict" -print0 | xargs -0 7z a fcitx5_dicts.7z
          find . -name "an_*_titles.txt" -print0 | xargs -0 7z a titles.7z

          find . -name "an_*.dict.yaml" -print0 | tar -czvf rime_dicts.tar.gz --null -T -
          find . -name "an_*.dict" -print0 | tar -czvf fcitx5_dicts.tar.gz --null -T -
          find . -name "an_*_titles.txt" -print0 | tar -czvf titles.tar.gz --null -T -

      - name: actions-generate-checksum@v1
        uses: jmgilman/actions-generate-checksum@v1
        with:
          patterns: |
            artifact/*.7z
            artifact/*.tar.gz
          output: artifact/checksum.txt

      - name: upload-artifact@v4
        id: upload-artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-assets-${{steps.date.outputs.date}}
          include-hidden-files: true
          path: |
            artifact/*.7z
            artifact/*.tar.gz
            !artifact/.gitkeep
          retention-days: 1

  release:
    needs:
      - check-version
      - package
    runs-on: ubuntu-latest
    steps:
      - name: download artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.package.outputs.artifact-name }}
          path: artifact

      - name: action-gh-release@v2
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.package.outputs.build-date }}
          name: Release ${{ needs.package.outputs.build-date }}
          body: |
            词库版本: ${{ needs.check-version.outputs.current_version }}
          files: artifact/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}